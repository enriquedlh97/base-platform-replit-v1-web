// This file is auto-generated by @hey-api/openapi-ts

import { type Client, formDataBodySerializer, type Options as Options2, type TDataShape, urlSearchParamsBodySerializer } from './client';
import { client } from './client.gen';
import type { AppointmentsCreateAppointmentData, AppointmentsCreateAppointmentErrors, AppointmentsCreateAppointmentResponses, AppointmentsDeleteAppointmentData, AppointmentsDeleteAppointmentErrors, AppointmentsDeleteAppointmentResponses, AppointmentsGetAllAppointmentsData, AppointmentsGetAllAppointmentsResponses, AppointmentsGetAppointmentData, AppointmentsGetAppointmentErrors, AppointmentsGetAppointmentResponses, AppointmentsUpdateAppointmentData, AppointmentsUpdateAppointmentErrors, AppointmentsUpdateAppointmentResponses, CategoriesReadCategoriesData, CategoriesReadCategoriesResponses, ClientsCreateClientData, ClientsCreateClientErrors, ClientsCreateClientResponses, ClientsDeleteClientData, ClientsDeleteClientErrors, ClientsDeleteClientResponses, ClientsGetAllClientsData, ClientsGetAllClientsResponses, ClientsGetClientData, ClientsGetClientErrors, ClientsGetClientResponses, ClientsUpdateClientData, ClientsUpdateClientErrors, ClientsUpdateClientResponses, ConversationsCreateConversationData, ConversationsCreateConversationErrors, ConversationsCreateConversationMessageData, ConversationsCreateConversationMessageErrors, ConversationsCreateConversationMessageResponses, ConversationsCreateConversationResponses, ConversationsDeleteConversationData, ConversationsDeleteConversationErrors, ConversationsDeleteConversationResponses, ConversationsGetConversationData, ConversationsGetConversationErrors, ConversationsGetConversationMessagesData, ConversationsGetConversationMessagesErrors, ConversationsGetConversationMessagesResponses, ConversationsGetConversationResponses, ConversationsGetWorkspaceConversationsData, ConversationsGetWorkspaceConversationsErrors, ConversationsGetWorkspaceConversationsResponses, ConversationsUpdateConversationData, ConversationsUpdateConversationErrors, ConversationsUpdateConversationResponses, EventsCreateEventData, EventsCreateEventErrors, EventsCreateEventResponses, EventsReadEventsData, EventsReadEventsResponses, ItemsCreateItemData, ItemsCreateItemErrors, ItemsCreateItemResponses, ItemsDeleteItemData, ItemsDeleteItemErrors, ItemsDeleteItemResponses, ItemsReadItemData, ItemsReadItemErrors, ItemsReadItemResponses, ItemsReadItemsData, ItemsReadItemsErrors, ItemsReadItemsResponses, ItemsUpdateItemData, ItemsUpdateItemErrors, ItemsUpdateItemResponses, LoginTestTokenData, LoginTestTokenResponses, MessagesCreateMessageData, MessagesCreateMessageErrors, MessagesCreateMessageResponses, MessagesDeleteMessageData, MessagesDeleteMessageErrors, MessagesDeleteMessageResponses, MessagesGetConversationMessagesData, MessagesGetConversationMessagesErrors, MessagesGetConversationMessagesResponses, MessagesGetMessageData, MessagesGetMessageErrors, MessagesGetMessageResponses, PostsCreatePostData, PostsCreatePostErrors, PostsCreatePostResponses, PostsReadPostsData, PostsReadPostsResponses, PrivateCreateUserData, PrivateCreateUserErrors, PrivateCreateUserResponses, ProjectsCreateProjectData, ProjectsCreateProjectErrors, ProjectsCreateProjectResponses, ProvidersCreateProviderEndpointData, ProvidersCreateProviderEndpointErrors, ProvidersCreateProviderEndpointResponses, ProvidersDeleteProviderEndpointData, ProvidersDeleteProviderEndpointErrors, ProvidersDeleteProviderEndpointResponses, ProvidersReadProviderData, ProvidersReadProviderErrors, ProvidersReadProviderResponses, ProvidersReadProvidersData, ProvidersReadProvidersResponses, ProvidersUpdateProviderData, ProvidersUpdateProviderErrors, ProvidersUpdateProviderResponses, SchedulingConnectorsActivateConnectorData, SchedulingConnectorsActivateConnectorErrors, SchedulingConnectorsActivateConnectorResponses, SchedulingConnectorsCreateConnectorData, SchedulingConnectorsCreateConnectorErrors, SchedulingConnectorsCreateConnectorResponses, SchedulingConnectorsDeactivateConnectorData, SchedulingConnectorsDeactivateConnectorErrors, SchedulingConnectorsDeactivateConnectorResponses, SchedulingConnectorsDeleteConnectorData, SchedulingConnectorsDeleteConnectorErrors, SchedulingConnectorsDeleteConnectorResponses, SchedulingConnectorsGetConnectorData, SchedulingConnectorsGetConnectorErrors, SchedulingConnectorsGetConnectorResponses, SchedulingConnectorsGetWorkspaceConnectorsData, SchedulingConnectorsGetWorkspaceConnectorsErrors, SchedulingConnectorsGetWorkspaceConnectorsResponses, SchedulingConnectorsUpdateConnectorData, SchedulingConnectorsUpdateConnectorErrors, SchedulingConnectorsUpdateConnectorResponses, ServicesCreateServiceEndpointData, ServicesCreateServiceEndpointErrors, ServicesCreateServiceEndpointResponses, ServicesDeleteServiceEndpointData, ServicesDeleteServiceEndpointErrors, ServicesDeleteServiceEndpointResponses, ServicesReadServiceData, ServicesReadServiceErrors, ServicesReadServiceResponses, ServicesReadServicesData, ServicesReadServicesResponses, ServicesUpdateServiceData, ServicesUpdateServiceErrors, ServicesUpdateServiceResponses, UsersCreateUserData, UsersCreateUserErrors, UsersCreateUserResponses, UsersDeleteUserData, UsersDeleteUserErrors, UsersDeleteUserMeData, UsersDeleteUserMeResponses, UsersDeleteUserResponses, UsersReadUserByIdData, UsersReadUserByIdErrors, UsersReadUserByIdResponses, UsersReadUserMeData, UsersReadUserMeResponses, UsersReadUsersData, UsersReadUsersErrors, UsersReadUsersResponses, UsersUpdateUserData, UsersUpdateUserErrors, UsersUpdateUserMeData, UsersUpdateUserMeErrors, UsersUpdateUserMeResponses, UsersUpdateUserResponses, UsersUploadAvatarMeData, UsersUploadAvatarMeErrors, UsersUploadAvatarMeResponses, UtilsHealthCheckData, UtilsHealthCheckResponses, UtilsTestEmailData, UtilsTestEmailErrors, UtilsTestEmailResponses, WorkspacesCreateWorkspaceData, WorkspacesCreateWorkspaceErrors, WorkspacesCreateWorkspaceResponses, WorkspacesDeleteWorkspaceData, WorkspacesDeleteWorkspaceErrors, WorkspacesDeleteWorkspaceResponses, WorkspaceServicesCreateWorkspaceServiceData, WorkspaceServicesCreateWorkspaceServiceErrors, WorkspaceServicesCreateWorkspaceServiceResponses, WorkspaceServicesDeleteServiceData, WorkspaceServicesDeleteServiceErrors, WorkspaceServicesDeleteServiceResponses, WorkspaceServicesGetServiceData, WorkspaceServicesGetServiceErrors, WorkspaceServicesGetServiceResponses, WorkspaceServicesGetWorkspaceServicesData, WorkspaceServicesGetWorkspaceServicesErrors, WorkspaceServicesGetWorkspaceServicesResponses, WorkspaceServicesUpdateServiceData, WorkspaceServicesUpdateServiceErrors, WorkspaceServicesUpdateServiceResponses, WorkspacesGetMyWorkspaceData, WorkspacesGetMyWorkspaceResponses, WorkspacesGetWorkspaceData, WorkspacesGetWorkspaceErrors, WorkspacesGetWorkspaceResponses, WorkspacesUpdateWorkspaceData, WorkspacesUpdateWorkspaceErrors, WorkspacesUpdateWorkspaceResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class LoginService {
    /**
     * Test Token
     *
     * Test access token
     */
    public static testToken<ThrowOnError extends boolean = false>(options?: Options<LoginTestTokenData, ThrowOnError>) {
        return (options?.client ?? client).post<LoginTestTokenResponses, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/login/test-token',
            ...options
        });
    }
}

export class UsersService {
    /**
     * Read Users
     *
     * Retrieve users.
     */
    public static readUsers<ThrowOnError extends boolean = false>(options?: Options<UsersReadUsersData, ThrowOnError>) {
        return (options?.client ?? client).get<UsersReadUsersResponses, UsersReadUsersErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/',
            ...options
        });
    }

    /**
     * Create User
     *
     * Create new user.
     */
    public static createUser<ThrowOnError extends boolean = false>(options: Options<UsersCreateUserData, ThrowOnError>) {
        return (options.client ?? client).post<UsersCreateUserResponses, UsersCreateUserErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * Delete User Me
     *
     * Delete own user.
     */
    public static deleteUserMe<ThrowOnError extends boolean = false>(options?: Options<UsersDeleteUserMeData, ThrowOnError>) {
        return (options?.client ?? client).delete<UsersDeleteUserMeResponses, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/me',
            ...options
        });
    }

    /**
     * Read User Me
     *
     * Get current user.
     */
    public static readUserMe<ThrowOnError extends boolean = false>(options?: Options<UsersReadUserMeData, ThrowOnError>) {
        return (options?.client ?? client).get<UsersReadUserMeResponses, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/me',
            ...options
        });
    }

    /**
     * Update User Me
     *
     * Update own user.
     */
    public static updateUserMe<ThrowOnError extends boolean = false>(options: Options<UsersUpdateUserMeData, ThrowOnError>) {
        return (options.client ?? client).patch<UsersUpdateUserMeResponses, UsersUpdateUserMeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/me',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * Upload Avatar Me
     *
     * Upload avatar for the current user.
     *
     * The avatar will be uploaded to Supabase Storage in the 'avatars' bucket
     * and the user's avatar_url will be updated in the database.
     *
     * Expected: multipart/form-data with 'avatar' field containing the image file.
     * Max size: 5MB. Allowed types: image/jpeg, image/png, image/webp.
     */
    public static uploadAvatarMe<ThrowOnError extends boolean = false>(options: Options<UsersUploadAvatarMeData, ThrowOnError>) {
        return (options.client ?? client).post<UsersUploadAvatarMeResponses, UsersUploadAvatarMeErrors, ThrowOnError>({
            ...formDataBodySerializer,
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/me/avatar',
            ...options,
            headers: {
                'Content-Type': null,
                ...options.headers
            }
        });
    }

    /**
     * Delete User
     *
     * Delete a user.
     */
    public static deleteUser<ThrowOnError extends boolean = false>(options: Options<UsersDeleteUserData, ThrowOnError>) {
        return (options.client ?? client).delete<UsersDeleteUserResponses, UsersDeleteUserErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/{user_id}',
            ...options
        });
    }

    /**
     * Read User By Id
     *
     * Get a specific user by id.
     */
    public static readUserById<ThrowOnError extends boolean = false>(options: Options<UsersReadUserByIdData, ThrowOnError>) {
        return (options.client ?? client).get<UsersReadUserByIdResponses, UsersReadUserByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/{user_id}',
            ...options
        });
    }

    /**
     * Update User
     *
     * Update a user.
     */
    public static updateUser<ThrowOnError extends boolean = false>(options: Options<UsersUpdateUserData, ThrowOnError>) {
        return (options.client ?? client).patch<UsersUpdateUserResponses, UsersUpdateUserErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/{user_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class UtilsService {
    /**
     * Test Email
     *
     * Test emails.
     */
    public static testEmail<ThrowOnError extends boolean = false>(options: Options<UtilsTestEmailData, ThrowOnError>) {
        return (options.client ?? client).post<UtilsTestEmailResponses, UtilsTestEmailErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/utils/test-email/',
            ...options
        });
    }

    /**
     * Health Check
     */
    public static healthCheck<ThrowOnError extends boolean = false>(options?: Options<UtilsHealthCheckData, ThrowOnError>) {
        return (options?.client ?? client).get<UtilsHealthCheckResponses, unknown, ThrowOnError>({
            url: '/api/v1/utils/health-check/',
            ...options
        });
    }
}

export class ItemsService {
    /**
     * Read Items
     *
     * Retrieve items.
     */
    public static readItems<ThrowOnError extends boolean = false>(options?: Options<ItemsReadItemsData, ThrowOnError>) {
        return (options?.client ?? client).get<ItemsReadItemsResponses, ItemsReadItemsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/items/',
            ...options
        });
    }

    /**
     * Create Item
     *
     * Create new item.
     */
    public static createItem<ThrowOnError extends boolean = false>(options: Options<ItemsCreateItemData, ThrowOnError>) {
        return (options.client ?? client).post<ItemsCreateItemResponses, ItemsCreateItemErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/items/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * Delete Item
     *
     * Delete an item.
     */
    public static deleteItem<ThrowOnError extends boolean = false>(options: Options<ItemsDeleteItemData, ThrowOnError>) {
        return (options.client ?? client).delete<ItemsDeleteItemResponses, ItemsDeleteItemErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/items/{id}',
            ...options
        });
    }

    /**
     * Read Item
     *
     * Get item by ID.
     */
    public static readItem<ThrowOnError extends boolean = false>(options: Options<ItemsReadItemData, ThrowOnError>) {
        return (options.client ?? client).get<ItemsReadItemResponses, ItemsReadItemErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/items/{id}',
            ...options
        });
    }

    /**
     * Update Item
     *
     * Update an item.
     */
    public static updateItem<ThrowOnError extends boolean = false>(options: Options<ItemsUpdateItemData, ThrowOnError>) {
        return (options.client ?? client).put<ItemsUpdateItemResponses, ItemsUpdateItemErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/items/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class ClientsService {
    /**
     * Get All Clients
     *
     * Get all clients.
     */
    public static getAllClients<ThrowOnError extends boolean = false>(options?: Options<ClientsGetAllClientsData, ThrowOnError>) {
        return (options?.client ?? client).get<ClientsGetAllClientsResponses, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/clients/',
            ...options
        });
    }

    /**
     * Create Client
     *
     * Create new client.
     */
    public static createClient<ThrowOnError extends boolean = false>(options: Options<ClientsCreateClientData, ThrowOnError>) {
        return (options.client ?? client).post<ClientsCreateClientResponses, ClientsCreateClientErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/clients/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * Delete Client
     *
     * Delete a client by client_id.
     */
    public static deleteClient<ThrowOnError extends boolean = false>(options: Options<ClientsDeleteClientData, ThrowOnError>) {
        return (options.client ?? client).delete<ClientsDeleteClientResponses, ClientsDeleteClientErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/clients/{client_id}',
            ...options
        });
    }

    /**
     * Get Client
     *
     * Get a specific client by client_id.
     */
    public static getClient<ThrowOnError extends boolean = false>(options: Options<ClientsGetClientData, ThrowOnError>) {
        return (options.client ?? client).get<ClientsGetClientResponses, ClientsGetClientErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/clients/{client_id}',
            ...options
        });
    }

    /**
     * Update Client
     *
     * Update an existing client.
     */
    public static updateClient<ThrowOnError extends boolean = false>(options: Options<ClientsUpdateClientData, ThrowOnError>) {
        return (options.client ?? client).put<ClientsUpdateClientResponses, ClientsUpdateClientErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/clients/{client_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class AppointmentsService {
    /**
     * Get All Appointments
     *
     * Get all appointments.
     */
    public static getAllAppointments<ThrowOnError extends boolean = false>(options?: Options<AppointmentsGetAllAppointmentsData, ThrowOnError>) {
        return (options?.client ?? client).get<AppointmentsGetAllAppointmentsResponses, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/appointments/',
            ...options
        });
    }

    /**
     * Create Appointment
     *
     * Create a new appointment.
     */
    public static createAppointment<ThrowOnError extends boolean = false>(options: Options<AppointmentsCreateAppointmentData, ThrowOnError>) {
        return (options.client ?? client).post<AppointmentsCreateAppointmentResponses, AppointmentsCreateAppointmentErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/appointments/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * Delete Appointment
     *
     * Delete an appointment by appointment_id.
     */
    public static deleteAppointment<ThrowOnError extends boolean = false>(options: Options<AppointmentsDeleteAppointmentData, ThrowOnError>) {
        return (options.client ?? client).delete<AppointmentsDeleteAppointmentResponses, AppointmentsDeleteAppointmentErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/appointments/{appointment_id}',
            ...options
        });
    }

    /**
     * Get Appointment
     *
     * Get a specific appointment by appointment_id.
     */
    public static getAppointment<ThrowOnError extends boolean = false>(options: Options<AppointmentsGetAppointmentData, ThrowOnError>) {
        return (options.client ?? client).get<AppointmentsGetAppointmentResponses, AppointmentsGetAppointmentErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/appointments/{appointment_id}',
            ...options
        });
    }

    /**
     * Update Appointment
     *
     * Update an existing appointment.
     */
    public static updateAppointment<ThrowOnError extends boolean = false>(options: Options<AppointmentsUpdateAppointmentData, ThrowOnError>) {
        return (options.client ?? client).put<AppointmentsUpdateAppointmentResponses, AppointmentsUpdateAppointmentErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/appointments/{appointment_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class ProvidersService {
    /**
     * Read Providers
     *
     * Retrieve providers.
     */
    public static readProviders<ThrowOnError extends boolean = false>(options?: Options<ProvidersReadProvidersData, ThrowOnError>) {
        return (options?.client ?? client).get<ProvidersReadProvidersResponses, unknown, ThrowOnError>({
            url: '/api/v1/providers/',
            ...options
        });
    }

    /**
     * Create Provider Endpoint
     *
     * Create new provider.
     */
    public static createProviderEndpoint<ThrowOnError extends boolean = false>(options: Options<ProvidersCreateProviderEndpointData, ThrowOnError>) {
        return (options.client ?? client).post<ProvidersCreateProviderEndpointResponses, ProvidersCreateProviderEndpointErrors, ThrowOnError>({
            url: '/api/v1/providers/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * Delete Provider Endpoint
     *
     * Delete a provider.
     */
    public static deleteProviderEndpoint<ThrowOnError extends boolean = false>(options: Options<ProvidersDeleteProviderEndpointData, ThrowOnError>) {
        return (options.client ?? client).delete<ProvidersDeleteProviderEndpointResponses, ProvidersDeleteProviderEndpointErrors, ThrowOnError>({
            url: '/api/v1/providers/{id}',
            ...options
        });
    }

    /**
     * Read Provider
     *
     * Get provider by ID.
     */
    public static readProvider<ThrowOnError extends boolean = false>(options: Options<ProvidersReadProviderData, ThrowOnError>) {
        return (options.client ?? client).get<ProvidersReadProviderResponses, ProvidersReadProviderErrors, ThrowOnError>({
            url: '/api/v1/providers/{id}',
            ...options
        });
    }

    /**
     * Update Provider
     *
     * Update a provider.
     */
    public static updateProvider<ThrowOnError extends boolean = false>(options: Options<ProvidersUpdateProviderData, ThrowOnError>) {
        return (options.client ?? client).put<ProvidersUpdateProviderResponses, ProvidersUpdateProviderErrors, ThrowOnError>({
            url: '/api/v1/providers/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class ServicesService {
    /**
     * Read Services
     *
     * Retrieve services.
     */
    public static readServices<ThrowOnError extends boolean = false>(options?: Options<ServicesReadServicesData, ThrowOnError>) {
        return (options?.client ?? client).get<ServicesReadServicesResponses, unknown, ThrowOnError>({
            url: '/api/v1/services/',
            ...options
        });
    }

    /**
     * Create Service Endpoint
     *
     * Create new service.
     */
    public static createServiceEndpoint<ThrowOnError extends boolean = false>(options: Options<ServicesCreateServiceEndpointData, ThrowOnError>) {
        return (options.client ?? client).post<ServicesCreateServiceEndpointResponses, ServicesCreateServiceEndpointErrors, ThrowOnError>({
            url: '/api/v1/services/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * Delete Service Endpoint
     *
     * Delete a service.
     */
    public static deleteServiceEndpoint<ThrowOnError extends boolean = false>(options: Options<ServicesDeleteServiceEndpointData, ThrowOnError>) {
        return (options.client ?? client).delete<ServicesDeleteServiceEndpointResponses, ServicesDeleteServiceEndpointErrors, ThrowOnError>({
            url: '/api/v1/services/{id}',
            ...options
        });
    }

    /**
     * Read Service
     *
     * Get service by ID.
     */
    public static readService<ThrowOnError extends boolean = false>(options: Options<ServicesReadServiceData, ThrowOnError>) {
        return (options.client ?? client).get<ServicesReadServiceResponses, ServicesReadServiceErrors, ThrowOnError>({
            url: '/api/v1/services/{id}',
            ...options
        });
    }

    /**
     * Update Service
     *
     * Update a service.
     */
    public static updateService<ThrowOnError extends boolean = false>(options: Options<ServicesUpdateServiceData, ThrowOnError>) {
        return (options.client ?? client).put<ServicesUpdateServiceResponses, ServicesUpdateServiceErrors, ThrowOnError>({
            url: '/api/v1/services/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class CategoriesService {
    /**
     * Read Categories
     *
     * Retrieve all categories.
     */
    public static readCategories<ThrowOnError extends boolean = false>(options?: Options<CategoriesReadCategoriesData, ThrowOnError>) {
        return (options?.client ?? client).get<CategoriesReadCategoriesResponses, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/categories/',
            ...options
        });
    }
}

export class EventsService {
    /**
     * Read Events
     *
     * Retrieve events for the authenticated user.
     */
    public static readEvents<ThrowOnError extends boolean = false>(options?: Options<EventsReadEventsData, ThrowOnError>) {
        return (options?.client ?? client).get<EventsReadEventsResponses, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/events/',
            ...options
        });
    }

    /**
     * Create Event
     *
     * Create a new event for the authenticated user.
     */
    public static createEvent<ThrowOnError extends boolean = false>(options: Options<EventsCreateEventData, ThrowOnError>) {
        return (options.client ?? client).post<EventsCreateEventResponses, EventsCreateEventErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/events/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class PostsService {
    /**
     * Read Posts
     */
    public static readPosts<ThrowOnError extends boolean = false>(options?: Options<PostsReadPostsData, ThrowOnError>) {
        return (options?.client ?? client).get<PostsReadPostsResponses, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/posts/',
            ...options
        });
    }

    /**
     * Create Post
     *
     * Create a new post with optional image upload.
     *
     * The image will be uploaded to Supabase Storage and the post will be created
     * with the image URL. The user_id is automatically set from the authenticated user.
     *
     * File uploads are handled by the centralized FileUploadService for consistent
     * validation, error handling, and storage management.
     */
    public static createPost<ThrowOnError extends boolean = false>(options: Options<PostsCreatePostData, ThrowOnError>) {
        return (options.client ?? client).post<PostsCreatePostResponses, PostsCreatePostErrors, ThrowOnError>({
            ...formDataBodySerializer,
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/posts/',
            ...options,
            headers: {
                'Content-Type': null,
                ...options.headers
            }
        });
    }
}

export class ProjectsService {
    /**
     * Create Project
     *
     * Create a new project.
     *
     * The project will be created with the user_id automatically set from the authenticated user.
     */
    public static createProject<ThrowOnError extends boolean = false>(options: Options<ProjectsCreateProjectData, ThrowOnError>) {
        return (options.client ?? client).post<ProjectsCreateProjectResponses, ProjectsCreateProjectErrors, ThrowOnError>({
            ...urlSearchParamsBodySerializer,
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/projects/',
            ...options,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                ...options.headers
            }
        });
    }
}

export class WorkspacesService {
    /**
     * Create Workspace
     *
     * Create a new workspace. Each user can have exactly one workspace.
     */
    public static createWorkspace<ThrowOnError extends boolean = false>(options: Options<WorkspacesCreateWorkspaceData, ThrowOnError>) {
        return (options.client ?? client).post<WorkspacesCreateWorkspaceResponses, WorkspacesCreateWorkspaceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/workspaces/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * Get My Workspace
     *
     * Get current user's workspace.
     */
    public static getMyWorkspace<ThrowOnError extends boolean = false>(options?: Options<WorkspacesGetMyWorkspaceData, ThrowOnError>) {
        return (options?.client ?? client).get<WorkspacesGetMyWorkspaceResponses, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/workspaces/me',
            ...options
        });
    }

    /**
     * Delete Workspace
     *
     * Delete workspace.
     */
    public static deleteWorkspace<ThrowOnError extends boolean = false>(options: Options<WorkspacesDeleteWorkspaceData, ThrowOnError>) {
        return (options.client ?? client).delete<WorkspacesDeleteWorkspaceResponses, WorkspacesDeleteWorkspaceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/workspaces/{workspace_id}',
            ...options
        });
    }

    /**
     * Get Workspace
     *
     * Get workspace by ID.
     */
    public static getWorkspace<ThrowOnError extends boolean = false>(options: Options<WorkspacesGetWorkspaceData, ThrowOnError>) {
        return (options.client ?? client).get<WorkspacesGetWorkspaceResponses, WorkspacesGetWorkspaceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/workspaces/{workspace_id}',
            ...options
        });
    }

    /**
     * Update Workspace
     *
     * Update workspace.
     */
    public static updateWorkspace<ThrowOnError extends boolean = false>(options: Options<WorkspacesUpdateWorkspaceData, ThrowOnError>) {
        return (options.client ?? client).patch<WorkspacesUpdateWorkspaceResponses, WorkspacesUpdateWorkspaceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/workspaces/{workspace_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class WorkspaceServicesService {
    /**
     * Get Workspace Services
     *
     * Get all services for a workspace.
     */
    public static getWorkspaceServices<ThrowOnError extends boolean = false>(options: Options<WorkspaceServicesGetWorkspaceServicesData, ThrowOnError>) {
        return (options.client ?? client).get<WorkspaceServicesGetWorkspaceServicesResponses, WorkspaceServicesGetWorkspaceServicesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/workspace-services/workspaces/{workspace_id}',
            ...options
        });
    }

    /**
     * Create Workspace Service
     *
     * Create a new service for a workspace.
     */
    public static createWorkspaceService<ThrowOnError extends boolean = false>(options: Options<WorkspaceServicesCreateWorkspaceServiceData, ThrowOnError>) {
        return (options.client ?? client).post<WorkspaceServicesCreateWorkspaceServiceResponses, WorkspaceServicesCreateWorkspaceServiceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/workspace-services/workspaces/{workspace_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * Delete Service
     *
     * Delete a service.
     */
    public static deleteService<ThrowOnError extends boolean = false>(options: Options<WorkspaceServicesDeleteServiceData, ThrowOnError>) {
        return (options.client ?? client).delete<WorkspaceServicesDeleteServiceResponses, WorkspaceServicesDeleteServiceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/workspace-services/{service_id}',
            ...options
        });
    }

    /**
     * Get Service
     *
     * Get a service by ID.
     */
    public static getService<ThrowOnError extends boolean = false>(options: Options<WorkspaceServicesGetServiceData, ThrowOnError>) {
        return (options.client ?? client).get<WorkspaceServicesGetServiceResponses, WorkspaceServicesGetServiceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/workspace-services/{service_id}',
            ...options
        });
    }

    /**
     * Update Service
     *
     * Update a service.
     */
    public static updateService<ThrowOnError extends boolean = false>(options: Options<WorkspaceServicesUpdateServiceData, ThrowOnError>) {
        return (options.client ?? client).patch<WorkspaceServicesUpdateServiceResponses, WorkspaceServicesUpdateServiceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/workspace-services/{service_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class SchedulingConnectorsService {
    /**
     * Get Workspace Connectors
     *
     * Get all connectors for a workspace.
     */
    public static getWorkspaceConnectors<ThrowOnError extends boolean = false>(options: Options<SchedulingConnectorsGetWorkspaceConnectorsData, ThrowOnError>) {
        return (options.client ?? client).get<SchedulingConnectorsGetWorkspaceConnectorsResponses, SchedulingConnectorsGetWorkspaceConnectorsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/connectors/workspaces/{workspace_id}',
            ...options
        });
    }

    /**
     * Create Connector
     *
     * Create a new connector for a workspace.
     */
    public static createConnector<ThrowOnError extends boolean = false>(options: Options<SchedulingConnectorsCreateConnectorData, ThrowOnError>) {
        return (options.client ?? client).post<SchedulingConnectorsCreateConnectorResponses, SchedulingConnectorsCreateConnectorErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/connectors/workspaces/{workspace_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * Delete Connector
     *
     * Delete a connector.
     */
    public static deleteConnector<ThrowOnError extends boolean = false>(options: Options<SchedulingConnectorsDeleteConnectorData, ThrowOnError>) {
        return (options.client ?? client).delete<SchedulingConnectorsDeleteConnectorResponses, SchedulingConnectorsDeleteConnectorErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/connectors/{connector_id}',
            ...options
        });
    }

    /**
     * Get Connector
     *
     * Get a connector by ID.
     */
    public static getConnector<ThrowOnError extends boolean = false>(options: Options<SchedulingConnectorsGetConnectorData, ThrowOnError>) {
        return (options.client ?? client).get<SchedulingConnectorsGetConnectorResponses, SchedulingConnectorsGetConnectorErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/connectors/{connector_id}',
            ...options
        });
    }

    /**
     * Update Connector
     *
     * Update a connector.
     */
    public static updateConnector<ThrowOnError extends boolean = false>(options: Options<SchedulingConnectorsUpdateConnectorData, ThrowOnError>) {
        return (options.client ?? client).patch<SchedulingConnectorsUpdateConnectorResponses, SchedulingConnectorsUpdateConnectorErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/connectors/{connector_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * Activate Connector
     *
     * Activate a connector (deactivates other connectors for the workspace).
     */
    public static activateConnector<ThrowOnError extends boolean = false>(options: Options<SchedulingConnectorsActivateConnectorData, ThrowOnError>) {
        return (options.client ?? client).post<SchedulingConnectorsActivateConnectorResponses, SchedulingConnectorsActivateConnectorErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/connectors/{connector_id}/activate',
            ...options
        });
    }

    /**
     * Deactivate Connector
     *
     * Deactivate a connector.
     */
    public static deactivateConnector<ThrowOnError extends boolean = false>(options: Options<SchedulingConnectorsDeactivateConnectorData, ThrowOnError>) {
        return (options.client ?? client).post<SchedulingConnectorsDeactivateConnectorResponses, SchedulingConnectorsDeactivateConnectorErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/connectors/{connector_id}/deactivate',
            ...options
        });
    }
}

export class ConversationsService {
    /**
     * Get Workspace Conversations
     *
     * Get all conversations for a workspace.
     */
    public static getWorkspaceConversations<ThrowOnError extends boolean = false>(options: Options<ConversationsGetWorkspaceConversationsData, ThrowOnError>) {
        return (options.client ?? client).get<ConversationsGetWorkspaceConversationsResponses, ConversationsGetWorkspaceConversationsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/conversations/workspaces/{workspace_id}',
            ...options
        });
    }

    /**
     * Create Conversation
     *
     * Create a new conversation for a workspace.
     */
    public static createConversation<ThrowOnError extends boolean = false>(options: Options<ConversationsCreateConversationData, ThrowOnError>) {
        return (options.client ?? client).post<ConversationsCreateConversationResponses, ConversationsCreateConversationErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/conversations/workspaces/{workspace_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * Delete Conversation
     *
     * Delete a conversation.
     */
    public static deleteConversation<ThrowOnError extends boolean = false>(options: Options<ConversationsDeleteConversationData, ThrowOnError>) {
        return (options.client ?? client).delete<ConversationsDeleteConversationResponses, ConversationsDeleteConversationErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/conversations/{conversation_id}',
            ...options
        });
    }

    /**
     * Get Conversation
     *
     * Get a conversation by ID.
     */
    public static getConversation<ThrowOnError extends boolean = false>(options: Options<ConversationsGetConversationData, ThrowOnError>) {
        return (options.client ?? client).get<ConversationsGetConversationResponses, ConversationsGetConversationErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/conversations/{conversation_id}',
            ...options
        });
    }

    /**
     * Update Conversation
     *
     * Update a conversation.
     */
    public static updateConversation<ThrowOnError extends boolean = false>(options: Options<ConversationsUpdateConversationData, ThrowOnError>) {
        return (options.client ?? client).patch<ConversationsUpdateConversationResponses, ConversationsUpdateConversationErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/conversations/{conversation_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * Get Conversation Messages
     *
     * Get all messages for a conversation.
     */
    public static getConversationMessages<ThrowOnError extends boolean = false>(options: Options<ConversationsGetConversationMessagesData, ThrowOnError>) {
        return (options.client ?? client).get<ConversationsGetConversationMessagesResponses, ConversationsGetConversationMessagesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/conversations/{conversation_id}/messages',
            ...options
        });
    }

    /**
     * Create Conversation Message
     *
     * Create a new message in a conversation.
     */
    public static createConversationMessage<ThrowOnError extends boolean = false>(options: Options<ConversationsCreateConversationMessageData, ThrowOnError>) {
        return (options.client ?? client).post<ConversationsCreateConversationMessageResponses, ConversationsCreateConversationMessageErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/conversations/{conversation_id}/messages',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class MessagesService {
    /**
     * Get Conversation Messages
     *
     * Get all messages for a conversation.
     */
    public static getConversationMessages<ThrowOnError extends boolean = false>(options: Options<MessagesGetConversationMessagesData, ThrowOnError>) {
        return (options.client ?? client).get<MessagesGetConversationMessagesResponses, MessagesGetConversationMessagesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/messages/conversations/{conversation_id}',
            ...options
        });
    }

    /**
     * Create Message
     *
     * Create a new message in a conversation.
     */
    public static createMessage<ThrowOnError extends boolean = false>(options: Options<MessagesCreateMessageData, ThrowOnError>) {
        return (options.client ?? client).post<MessagesCreateMessageResponses, MessagesCreateMessageErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/messages/conversations/{conversation_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * Delete Message
     *
     * Delete a message.
     */
    public static deleteMessage<ThrowOnError extends boolean = false>(options: Options<MessagesDeleteMessageData, ThrowOnError>) {
        return (options.client ?? client).delete<MessagesDeleteMessageResponses, MessagesDeleteMessageErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/messages/{message_id}',
            ...options
        });
    }

    /**
     * Get Message
     *
     * Get a message by ID.
     */
    public static getMessage<ThrowOnError extends boolean = false>(options: Options<MessagesGetMessageData, ThrowOnError>) {
        return (options.client ?? client).get<MessagesGetMessageResponses, MessagesGetMessageErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/messages/{message_id}',
            ...options
        });
    }
}

export class PrivateService {
    /**
     * Create User
     *
     * Create a new user.
     */
    public static createUser<ThrowOnError extends boolean = false>(options: Options<PrivateCreateUserData, ThrowOnError>) {
        return (options.client ?? client).post<PrivateCreateUserResponses, PrivateCreateUserErrors, ThrowOnError>({
            url: '/api/v1/private/users/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}
