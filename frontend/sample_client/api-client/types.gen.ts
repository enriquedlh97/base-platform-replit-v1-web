// This file is auto-generated by @hey-api/openapi-ts

/**
 * Appointment
 */
export type Appointment = {
  /**
   * Appointment Date
   */
  appointment_date?: string
  /**
   * Price
   */
  price: number
  /**
   * Status
   */
  status: string
  /**
   * Client Notes
   */
  client_notes?: string | null
  /**
   * Internal Notes
   */
  internal_notes?: string | null
  /**
   * Duration
   */
  duration: number
  /**
   * Client Id
   */
  client_id: string
  /**
   * Provider Id
   */
  provider_id: string
  /**
   * Service Id
   */
  service_id: string
  /**
   * Id
   */
  id?: string
}

/**
 * AppointmentCreate
 */
export type AppointmentCreate = {
  /**
   * Appointment Date
   */
  appointment_date?: string
  /**
   * Price
   */
  price: number
  /**
   * Status
   */
  status: string
  /**
   * Client Notes
   */
  client_notes?: string | null
  /**
   * Internal Notes
   */
  internal_notes?: string | null
  /**
   * Duration
   */
  duration: number
  /**
   * Client Id
   */
  client_id: string
  /**
   * Provider Id
   */
  provider_id: string
  /**
   * Service Id
   */
  service_id: string
}

/**
 * AppointmentUpdate
 */
export type AppointmentUpdate = {
  /**
   * Appointment Date
   */
  appointment_date: string
  /**
   * Price
   */
  price: number
  /**
   * Status
   */
  status: string
  /**
   * Client Notes
   */
  client_notes?: string | null
  /**
   * Internal Notes
   */
  internal_notes?: string | null
  /**
   * Duration
   */
  duration: number
  /**
   * Client Id
   */
  client_id: string
  /**
   * Provider Id
   */
  provider_id: string
  /**
   * Service Id
   */
  service_id: string
}

/**
 * Body_posts-create_post
 */
export type BodyPostsCreatePost = {
  /**
   * Title
   */
  title: string
  /**
   * Content
   */
  content?: string | null
  /**
   * Category Id
   */
  category_id?: string | null
  /**
   * Image
   */
  image?: (Blob | File) | null
}

/**
 * Body_projects-create_project
 */
export type BodyProjectsCreateProject = {
  /**
   * Name
   */
  name: string
  /**
   * Description
   */
  description?: string | null
  /**
   * Number Of Days
   */
  number_of_days?: number | null
  /**
   * Paid Project
   */
  paid_project?: boolean
  /**
   * Street
   */
  street?: string | null
  /**
   * Us Zip Code
   */
  us_zip_code?: string | null
  /**
   * Project Type
   */
  project_type?: string | null
}

/**
 * Body_users-upload_avatar_me
 */
export type BodyUsersUploadAvatarMe = {
  /**
   * Avatar
   */
  avatar: Blob | File
}

/**
 * CategoryPublic
 */
export type CategoryPublic = {
  /**
   * Id
   */
  id: string
  /**
   * Name
   */
  name: string
  /**
   * Created At
   */
  created_at: string
  /**
   * Updated At
   */
  updated_at: string
}

/**
 * Client
 */
export type Client = {
  /**
   * First Name
   */
  first_name: string
  /**
   * Last Name
   */
  last_name: string
  /**
   * Email
   */
  email: string
  /**
   * Phone
   */
  phone: string
  /**
   * Id
   */
  id?: string
}

/**
 * ClientCreate
 */
export type ClientCreate = {
  /**
   * First Name
   */
  first_name: string
  /**
   * Last Name
   */
  last_name: string
  /**
   * Email
   */
  email: string
  /**
   * Phone
   */
  phone: string
}

/**
 * ClientUpdate
 */
export type ClientUpdate = {
  /**
   * First Name
   */
  first_name: string
  /**
   * Last Name
   */
  last_name: string
  /**
   * Email
   */
  email: string
  /**
   * Phone
   */
  phone: string
}

/**
 * EventCreate
 */
export type EventCreate = {
  /**
   * Name
   */
  name: string
  /**
   * Description
   */
  description?: string | null
  /**
   * Start Time
   */
  start_time?: string | null
  /**
   * End Time
   */
  end_time?: string | null
  /**
   * Status
   */
  status: string
}

/**
 * EventPublic
 */
export type EventPublic = {
  /**
   * Id
   */
  id: string
  /**
   * Name
   */
  name: string
  /**
   * Description
   */
  description?: string | null
  /**
   * Start Time
   */
  start_time?: string | null
  /**
   * End Time
   */
  end_time?: string | null
  /**
   * Status
   */
  status: string
  /**
   * Created At
   */
  created_at: string
  /**
   * Updated At
   */
  updated_at: string
  /**
   * User Id
   */
  user_id: string
}

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
  /**
   * Detail
   */
  detail?: ValidationError[]
}

/**
 * ItemCreate
 */
export type ItemCreate = {
  /**
   * Title
   */
  title: string
  /**
   * Description
   */
  description?: string | null
}

/**
 * ItemPublic
 */
export type ItemPublic = {
  /**
   * Title
   */
  title: string
  /**
   * Description
   */
  description?: string | null
  /**
   * Id
   */
  id: string
  /**
   * Owner Id
   */
  owner_id: string
}

/**
 * ItemUpdate
 */
export type ItemUpdate = {
  /**
   * Title
   */
  title?: string | null
  /**
   * Description
   */
  description?: string | null
}

/**
 * ItemsPublic
 */
export type ItemsPublic = {
  /**
   * Data
   */
  data: ItemPublic[]
  /**
   * Count
   */
  count: number
}

/**
 * Message
 */
export type Message = {
  /**
   * Message
   */
  message: string
}

/**
 * PostPublic
 */
export type PostPublic = {
  /**
   * Id
   */
  id: string
  /**
   * User Id
   */
  user_id: string
  /**
   * Category Id
   */
  category_id?: string | null
  /**
   * Title
   */
  title: string
  /**
   * Content
   */
  content?: string | null
  /**
   * Image Url
   */
  image_url?: string | null
  /**
   * Created At
   */
  created_at: string
  /**
   * Updated At
   */
  updated_at: string
  /**
   * Category Name
   */
  category_name?: string | null
  author?: UserPublic | null
}

/**
 * PrivateUserCreate
 */
export type PrivateUserCreate = {
  /**
   * Email
   */
  email: string
  /**
   * Full Name
   */
  full_name: string
  /**
   * Is Verified
   */
  is_verified?: boolean
}

/**
 * ProjectPublic
 */
export type ProjectPublic = {
  /**
   * Id
   */
  id: string
  /**
   * User Id
   */
  user_id: string
  /**
   * Name
   */
  name: string
  /**
   * Description
   */
  description?: string | null
  /**
   * Number Of Days
   */
  number_of_days?: number | null
  /**
   * Paid Project
   */
  paid_project: boolean
  /**
   * Street
   */
  street?: string | null
  /**
   * Us Zip Code
   */
  us_zip_code?: string | null
  /**
   * Project Type
   */
  project_type?: string | null
  /**
   * Created At
   */
  created_at: string
  /**
   * Updated At
   */
  updated_at: string
}

/**
 * ProviderCreate
 */
export type ProviderCreate = {
  /**
   * Public Name
   */
  public_name: string
  /**
   * Email
   */
  email: string
  /**
   * Accepts Online Bookings
   */
  accepts_online_bookings?: boolean
  /**
   * Services
   */
  services?: {
    [key: string]: string[]
  }
  /**
   * Photo Url
   */
  photo_url?: string | null
  /**
   * Working Hours
   */
  working_hours?: {
    [key: string]: string
  }
}

/**
 * ProviderPublic
 */
export type ProviderPublic = {
  /**
   * Public Name
   */
  public_name: string
  /**
   * Email
   */
  email: string
  /**
   * Accepts Online Bookings
   */
  accepts_online_bookings?: boolean
  /**
   * Services
   */
  services?: {
    [key: string]: string[]
  }
  /**
   * Photo Url
   */
  photo_url?: string | null
  /**
   * Working Hours
   */
  working_hours?: {
    [key: string]: string
  }
  /**
   * Id
   */
  id: string
}

/**
 * ProviderUpdate
 */
export type ProviderUpdate = {
  /**
   * Public Name
   */
  public_name?: string
  /**
   * Email
   */
  email?: string
  /**
   * Accepts Online Bookings
   */
  accepts_online_bookings?: boolean
  /**
   * Services
   */
  services?: {
    [key: string]: string[]
  }
  /**
   * Photo Url
   */
  photo_url?: string | null
  /**
   * Working Hours
   */
  working_hours?: {
    [key: string]: string
  }
}

/**
 * ProvidersPublic
 */
export type ProvidersPublic = {
  /**
   * Data
   */
  data: ProviderPublic[]
  /**
   * Count
   */
  count: number
}

/**
 * ServiceCreate
 */
export type ServiceCreate = {
  /**
   * Category
   */
  category: string
  /**
   * Description
   */
  description?: string | null
  /**
   * Duration
   */
  duration: number
  /**
   * Price
   */
  price: number
}

/**
 * ServicePublic
 */
export type ServicePublic = {
  /**
   * Category
   */
  category: string
  /**
   * Description
   */
  description?: string | null
  /**
   * Duration
   */
  duration: number
  /**
   * Price
   */
  price: number
  /**
   * Id
   */
  id: string
}

/**
 * ServiceUpdate
 */
export type ServiceUpdate = {
  /**
   * Category
   */
  category?: string
  /**
   * Description
   */
  description?: string | null
  /**
   * Duration
   */
  duration?: number
  /**
   * Price
   */
  price?: number
}

/**
 * ServicesPublic
 */
export type ServicesPublic = {
  /**
   * Data
   */
  data: ServicePublic[]
  /**
   * Count
   */
  count: number
}

/**
 * UserCreate
 */
export type UserCreate = {
  /**
   * Email
   */
  email: string
  /**
   * Is Active
   */
  is_active?: boolean
  /**
   * Is Superuser
   */
  is_superuser?: boolean
  /**
   * Full Name
   */
  full_name?: string | null
  /**
   * Name
   */
  name?: string | null
  /**
   * About
   */
  about?: string | null
  /**
   * Avatar Url
   */
  avatar_url?: string | null
}

/**
 * UserPublic
 */
export type UserPublic = {
  /**
   * Email
   */
  email: string
  /**
   * Is Active
   */
  is_active?: boolean
  /**
   * Is Superuser
   */
  is_superuser?: boolean
  /**
   * Full Name
   */
  full_name?: string | null
  /**
   * Name
   */
  name?: string | null
  /**
   * About
   */
  about?: string | null
  /**
   * Avatar Url
   */
  avatar_url?: string | null
  /**
   * Id
   */
  id: string
}

/**
 * UserUpdate
 */
export type UserUpdate = {
  /**
   * Email
   */
  email?: string | null
  /**
   * Is Active
   */
  is_active?: boolean
  /**
   * Is Superuser
   */
  is_superuser?: boolean
  /**
   * Full Name
   */
  full_name?: string | null
  /**
   * Name
   */
  name?: string | null
  /**
   * About
   */
  about?: string | null
  /**
   * Avatar Url
   */
  avatar_url?: string | null
  /**
   * Password
   */
  password?: string | null
}

/**
 * UserUpdateMe
 */
export type UserUpdateMe = {
  /**
   * Full Name
   */
  full_name?: string | null
  /**
   * Email
   */
  email?: string | null
  /**
   * Name
   */
  name?: string | null
  /**
   * About
   */
  about?: string | null
  /**
   * Avatar Url
   */
  avatar_url?: string | null
}

/**
 * UsersPublic
 */
export type UsersPublic = {
  /**
   * Data
   */
  data: UserPublic[]
  /**
   * Count
   */
  count: number
}

/**
 * ValidationError
 */
export type ValidationError = {
  /**
   * Location
   */
  loc: (string | number)[]
  /**
   * Message
   */
  msg: string
  /**
   * Error Type
   */
  type: string
}

export type LoginTestTokenData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/login/test-token'
}

export type LoginTestTokenResponses = {
  /**
   * Successful Response
   */
  200: UserPublic
}

export type LoginTestTokenResponse = LoginTestTokenResponses[keyof LoginTestTokenResponses]

export type UsersReadUsersData = {
  body?: never
  path?: never
  query?: {
    /**
     * Skip
     */
    skip?: number
    /**
     * Limit
     */
    limit?: number
  }
  url: '/api/v1/users/'
}

export type UsersReadUsersErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UsersReadUsersError = UsersReadUsersErrors[keyof UsersReadUsersErrors]

export type UsersReadUsersResponses = {
  /**
   * Successful Response
   */
  200: UsersPublic
}

export type UsersReadUsersResponse = UsersReadUsersResponses[keyof UsersReadUsersResponses]

export type UsersCreateUserData = {
  body: UserCreate
  path?: never
  query?: never
  url: '/api/v1/users/'
}

export type UsersCreateUserErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UsersCreateUserError = UsersCreateUserErrors[keyof UsersCreateUserErrors]

export type UsersCreateUserResponses = {
  /**
   * Successful Response
   */
  200: UserPublic
}

export type UsersCreateUserResponse = UsersCreateUserResponses[keyof UsersCreateUserResponses]

export type UsersDeleteUserMeData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/users/me'
}

export type UsersDeleteUserMeResponses = {
  /**
   * Successful Response
   */
  200: Message
}

export type UsersDeleteUserMeResponse = UsersDeleteUserMeResponses[keyof UsersDeleteUserMeResponses]

export type UsersReadUserMeData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/users/me'
}

export type UsersReadUserMeResponses = {
  /**
   * Successful Response
   */
  200: UserPublic
}

export type UsersReadUserMeResponse = UsersReadUserMeResponses[keyof UsersReadUserMeResponses]

export type UsersUpdateUserMeData = {
  body: UserUpdateMe
  path?: never
  query?: never
  url: '/api/v1/users/me'
}

export type UsersUpdateUserMeErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UsersUpdateUserMeError = UsersUpdateUserMeErrors[keyof UsersUpdateUserMeErrors]

export type UsersUpdateUserMeResponses = {
  /**
   * Successful Response
   */
  200: UserPublic
}

export type UsersUpdateUserMeResponse = UsersUpdateUserMeResponses[keyof UsersUpdateUserMeResponses]

export type UsersUploadAvatarMeData = {
  body: BodyUsersUploadAvatarMe
  path?: never
  query?: never
  url: '/api/v1/users/me/avatar'
}

export type UsersUploadAvatarMeErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UsersUploadAvatarMeError = UsersUploadAvatarMeErrors[keyof UsersUploadAvatarMeErrors]

export type UsersUploadAvatarMeResponses = {
  /**
   * Successful Response
   */
  200: UserPublic
}

export type UsersUploadAvatarMeResponse =
  UsersUploadAvatarMeResponses[keyof UsersUploadAvatarMeResponses]

export type UsersDeleteUserData = {
  body?: never
  path: {
    /**
     * User Id
     */
    user_id: string
  }
  query?: never
  url: '/api/v1/users/{user_id}'
}

export type UsersDeleteUserErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UsersDeleteUserError = UsersDeleteUserErrors[keyof UsersDeleteUserErrors]

export type UsersDeleteUserResponses = {
  /**
   * Successful Response
   */
  200: Message
}

export type UsersDeleteUserResponse = UsersDeleteUserResponses[keyof UsersDeleteUserResponses]

export type UsersReadUserByIdData = {
  body?: never
  path: {
    /**
     * User Id
     */
    user_id: string
  }
  query?: never
  url: '/api/v1/users/{user_id}'
}

export type UsersReadUserByIdErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UsersReadUserByIdError = UsersReadUserByIdErrors[keyof UsersReadUserByIdErrors]

export type UsersReadUserByIdResponses = {
  /**
   * Successful Response
   */
  200: UserPublic
}

export type UsersReadUserByIdResponse = UsersReadUserByIdResponses[keyof UsersReadUserByIdResponses]

export type UsersUpdateUserData = {
  body: UserUpdate
  path: {
    /**
     * User Id
     */
    user_id: string
  }
  query?: never
  url: '/api/v1/users/{user_id}'
}

export type UsersUpdateUserErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UsersUpdateUserError = UsersUpdateUserErrors[keyof UsersUpdateUserErrors]

export type UsersUpdateUserResponses = {
  /**
   * Successful Response
   */
  200: UserPublic
}

export type UsersUpdateUserResponse = UsersUpdateUserResponses[keyof UsersUpdateUserResponses]

export type UtilsTestEmailData = {
  body?: never
  path?: never
  query: {
    /**
     * Email To
     */
    email_to: string
  }
  url: '/api/v1/utils/test-email/'
}

export type UtilsTestEmailErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UtilsTestEmailError = UtilsTestEmailErrors[keyof UtilsTestEmailErrors]

export type UtilsTestEmailResponses = {
  /**
   * Successful Response
   */
  201: Message
}

export type UtilsTestEmailResponse = UtilsTestEmailResponses[keyof UtilsTestEmailResponses]

export type UtilsHealthCheckData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/utils/health-check/'
}

export type UtilsHealthCheckResponses = {
  /**
   * Response Utils-Health Check
   * Successful Response
   */
  200: boolean
}

export type UtilsHealthCheckResponse = UtilsHealthCheckResponses[keyof UtilsHealthCheckResponses]

export type ItemsReadItemsData = {
  body?: never
  path?: never
  query?: {
    /**
     * Skip
     */
    skip?: number
    /**
     * Limit
     */
    limit?: number
  }
  url: '/api/v1/items/'
}

export type ItemsReadItemsErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ItemsReadItemsError = ItemsReadItemsErrors[keyof ItemsReadItemsErrors]

export type ItemsReadItemsResponses = {
  /**
   * Successful Response
   */
  200: ItemsPublic
}

export type ItemsReadItemsResponse = ItemsReadItemsResponses[keyof ItemsReadItemsResponses]

export type ItemsCreateItemData = {
  body: ItemCreate
  path?: never
  query?: never
  url: '/api/v1/items/'
}

export type ItemsCreateItemErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ItemsCreateItemError = ItemsCreateItemErrors[keyof ItemsCreateItemErrors]

export type ItemsCreateItemResponses = {
  /**
   * Successful Response
   */
  200: ItemPublic
}

export type ItemsCreateItemResponse = ItemsCreateItemResponses[keyof ItemsCreateItemResponses]

export type ItemsDeleteItemData = {
  body?: never
  path: {
    /**
     * Id
     */
    id: string
  }
  query?: never
  url: '/api/v1/items/{id}'
}

export type ItemsDeleteItemErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ItemsDeleteItemError = ItemsDeleteItemErrors[keyof ItemsDeleteItemErrors]

export type ItemsDeleteItemResponses = {
  /**
   * Successful Response
   */
  200: Message
}

export type ItemsDeleteItemResponse = ItemsDeleteItemResponses[keyof ItemsDeleteItemResponses]

export type ItemsReadItemData = {
  body?: never
  path: {
    /**
     * Id
     */
    id: string
  }
  query?: never
  url: '/api/v1/items/{id}'
}

export type ItemsReadItemErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ItemsReadItemError = ItemsReadItemErrors[keyof ItemsReadItemErrors]

export type ItemsReadItemResponses = {
  /**
   * Successful Response
   */
  200: ItemPublic
}

export type ItemsReadItemResponse = ItemsReadItemResponses[keyof ItemsReadItemResponses]

export type ItemsUpdateItemData = {
  body: ItemUpdate
  path: {
    /**
     * Id
     */
    id: string
  }
  query?: never
  url: '/api/v1/items/{id}'
}

export type ItemsUpdateItemErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ItemsUpdateItemError = ItemsUpdateItemErrors[keyof ItemsUpdateItemErrors]

export type ItemsUpdateItemResponses = {
  /**
   * Successful Response
   */
  200: ItemPublic
}

export type ItemsUpdateItemResponse = ItemsUpdateItemResponses[keyof ItemsUpdateItemResponses]

export type ClientsGetAllClientsData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/clients/'
}

export type ClientsGetAllClientsResponses = {
  /**
   * Response Clients-Get All Clients
   * Successful Response
   */
  200: Client[]
}

export type ClientsGetAllClientsResponse =
  ClientsGetAllClientsResponses[keyof ClientsGetAllClientsResponses]

export type ClientsCreateClientData = {
  body: ClientCreate
  path?: never
  query?: never
  url: '/api/v1/clients/'
}

export type ClientsCreateClientErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ClientsCreateClientError = ClientsCreateClientErrors[keyof ClientsCreateClientErrors]

export type ClientsCreateClientResponses = {
  /**
   * Successful Response
   */
  200: Client
}

export type ClientsCreateClientResponse =
  ClientsCreateClientResponses[keyof ClientsCreateClientResponses]

export type ClientsDeleteClientData = {
  body?: never
  path: {
    /**
     * Client Id
     */
    client_id: string
  }
  query?: never
  url: '/api/v1/clients/{client_id}'
}

export type ClientsDeleteClientErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ClientsDeleteClientError = ClientsDeleteClientErrors[keyof ClientsDeleteClientErrors]

export type ClientsDeleteClientResponses = {
  /**
   * Successful Response
   */
  200: Client
}

export type ClientsDeleteClientResponse =
  ClientsDeleteClientResponses[keyof ClientsDeleteClientResponses]

export type ClientsGetClientData = {
  body?: never
  path: {
    /**
     * Client Id
     */
    client_id: string
  }
  query?: never
  url: '/api/v1/clients/{client_id}'
}

export type ClientsGetClientErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ClientsGetClientError = ClientsGetClientErrors[keyof ClientsGetClientErrors]

export type ClientsGetClientResponses = {
  /**
   * Successful Response
   */
  200: Client
}

export type ClientsGetClientResponse = ClientsGetClientResponses[keyof ClientsGetClientResponses]

export type ClientsUpdateClientData = {
  body: ClientUpdate
  path: {
    /**
     * Client Id
     */
    client_id: string
  }
  query?: never
  url: '/api/v1/clients/{client_id}'
}

export type ClientsUpdateClientErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ClientsUpdateClientError = ClientsUpdateClientErrors[keyof ClientsUpdateClientErrors]

export type ClientsUpdateClientResponses = {
  /**
   * Successful Response
   */
  200: Client
}

export type ClientsUpdateClientResponse =
  ClientsUpdateClientResponses[keyof ClientsUpdateClientResponses]

export type AppointmentsGetAllAppointmentsData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/appointments/'
}

export type AppointmentsGetAllAppointmentsResponses = {
  /**
   * Response Appointments-Get All Appointments
   * Successful Response
   */
  200: Appointment[]
}

export type AppointmentsGetAllAppointmentsResponse =
  AppointmentsGetAllAppointmentsResponses[keyof AppointmentsGetAllAppointmentsResponses]

export type AppointmentsCreateAppointmentData = {
  body: AppointmentCreate
  path?: never
  query?: never
  url: '/api/v1/appointments/'
}

export type AppointmentsCreateAppointmentErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type AppointmentsCreateAppointmentError =
  AppointmentsCreateAppointmentErrors[keyof AppointmentsCreateAppointmentErrors]

export type AppointmentsCreateAppointmentResponses = {
  /**
   * Successful Response
   */
  200: Appointment
}

export type AppointmentsCreateAppointmentResponse =
  AppointmentsCreateAppointmentResponses[keyof AppointmentsCreateAppointmentResponses]

export type AppointmentsDeleteAppointmentData = {
  body?: never
  path: {
    /**
     * Appointment Id
     */
    appointment_id: string
  }
  query?: never
  url: '/api/v1/appointments/{appointment_id}'
}

export type AppointmentsDeleteAppointmentErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type AppointmentsDeleteAppointmentError =
  AppointmentsDeleteAppointmentErrors[keyof AppointmentsDeleteAppointmentErrors]

export type AppointmentsDeleteAppointmentResponses = {
  /**
   * Successful Response
   */
  200: Appointment
}

export type AppointmentsDeleteAppointmentResponse =
  AppointmentsDeleteAppointmentResponses[keyof AppointmentsDeleteAppointmentResponses]

export type AppointmentsGetAppointmentData = {
  body?: never
  path: {
    /**
     * Appointment Id
     */
    appointment_id: string
  }
  query?: never
  url: '/api/v1/appointments/{appointment_id}'
}

export type AppointmentsGetAppointmentErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type AppointmentsGetAppointmentError =
  AppointmentsGetAppointmentErrors[keyof AppointmentsGetAppointmentErrors]

export type AppointmentsGetAppointmentResponses = {
  /**
   * Successful Response
   */
  200: Appointment
}

export type AppointmentsGetAppointmentResponse =
  AppointmentsGetAppointmentResponses[keyof AppointmentsGetAppointmentResponses]

export type AppointmentsUpdateAppointmentData = {
  body: AppointmentUpdate
  path: {
    /**
     * Appointment Id
     */
    appointment_id: string
  }
  query?: never
  url: '/api/v1/appointments/{appointment_id}'
}

export type AppointmentsUpdateAppointmentErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type AppointmentsUpdateAppointmentError =
  AppointmentsUpdateAppointmentErrors[keyof AppointmentsUpdateAppointmentErrors]

export type AppointmentsUpdateAppointmentResponses = {
  /**
   * Successful Response
   */
  200: Appointment
}

export type AppointmentsUpdateAppointmentResponse =
  AppointmentsUpdateAppointmentResponses[keyof AppointmentsUpdateAppointmentResponses]

export type ProvidersReadProvidersData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/providers/'
}

export type ProvidersReadProvidersResponses = {
  /**
   * Successful Response
   */
  200: ProvidersPublic
}

export type ProvidersReadProvidersResponse =
  ProvidersReadProvidersResponses[keyof ProvidersReadProvidersResponses]

export type ProvidersCreateProviderEndpointData = {
  body: ProviderCreate
  path?: never
  query?: never
  url: '/api/v1/providers/'
}

export type ProvidersCreateProviderEndpointErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ProvidersCreateProviderEndpointError =
  ProvidersCreateProviderEndpointErrors[keyof ProvidersCreateProviderEndpointErrors]

export type ProvidersCreateProviderEndpointResponses = {
  /**
   * Successful Response
   */
  200: ProviderPublic
}

export type ProvidersCreateProviderEndpointResponse =
  ProvidersCreateProviderEndpointResponses[keyof ProvidersCreateProviderEndpointResponses]

export type ProvidersDeleteProviderEndpointData = {
  body?: never
  path: {
    /**
     * Id
     */
    id: string
  }
  query?: never
  url: '/api/v1/providers/{id}'
}

export type ProvidersDeleteProviderEndpointErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ProvidersDeleteProviderEndpointError =
  ProvidersDeleteProviderEndpointErrors[keyof ProvidersDeleteProviderEndpointErrors]

export type ProvidersDeleteProviderEndpointResponses = {
  /**
   * Response Providers-Delete Provider Endpoint
   * Successful Response
   */
  200: {
    [key: string]: string
  }
}

export type ProvidersDeleteProviderEndpointResponse =
  ProvidersDeleteProviderEndpointResponses[keyof ProvidersDeleteProviderEndpointResponses]

export type ProvidersReadProviderData = {
  body?: never
  path: {
    /**
     * Id
     */
    id: string
  }
  query?: never
  url: '/api/v1/providers/{id}'
}

export type ProvidersReadProviderErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ProvidersReadProviderError =
  ProvidersReadProviderErrors[keyof ProvidersReadProviderErrors]

export type ProvidersReadProviderResponses = {
  /**
   * Successful Response
   */
  200: ProviderPublic
}

export type ProvidersReadProviderResponse =
  ProvidersReadProviderResponses[keyof ProvidersReadProviderResponses]

export type ProvidersUpdateProviderData = {
  body: ProviderUpdate
  path: {
    /**
     * Id
     */
    id: string
  }
  query?: never
  url: '/api/v1/providers/{id}'
}

export type ProvidersUpdateProviderErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ProvidersUpdateProviderError =
  ProvidersUpdateProviderErrors[keyof ProvidersUpdateProviderErrors]

export type ProvidersUpdateProviderResponses = {
  /**
   * Successful Response
   */
  200: ProviderPublic
}

export type ProvidersUpdateProviderResponse =
  ProvidersUpdateProviderResponses[keyof ProvidersUpdateProviderResponses]

export type ServicesReadServicesData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/services/'
}

export type ServicesReadServicesResponses = {
  /**
   * Successful Response
   */
  200: ServicesPublic
}

export type ServicesReadServicesResponse =
  ServicesReadServicesResponses[keyof ServicesReadServicesResponses]

export type ServicesCreateServiceEndpointData = {
  body: ServiceCreate
  path?: never
  query?: never
  url: '/api/v1/services/'
}

export type ServicesCreateServiceEndpointErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ServicesCreateServiceEndpointError =
  ServicesCreateServiceEndpointErrors[keyof ServicesCreateServiceEndpointErrors]

export type ServicesCreateServiceEndpointResponses = {
  /**
   * Successful Response
   */
  200: ServicePublic
}

export type ServicesCreateServiceEndpointResponse =
  ServicesCreateServiceEndpointResponses[keyof ServicesCreateServiceEndpointResponses]

export type ServicesDeleteServiceEndpointData = {
  body?: never
  path: {
    /**
     * Id
     */
    id: string
  }
  query?: never
  url: '/api/v1/services/{id}'
}

export type ServicesDeleteServiceEndpointErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ServicesDeleteServiceEndpointError =
  ServicesDeleteServiceEndpointErrors[keyof ServicesDeleteServiceEndpointErrors]

export type ServicesDeleteServiceEndpointResponses = {
  /**
   * Response Services-Delete Service Endpoint
   * Successful Response
   */
  200: {
    [key: string]: string
  }
}

export type ServicesDeleteServiceEndpointResponse =
  ServicesDeleteServiceEndpointResponses[keyof ServicesDeleteServiceEndpointResponses]

export type ServicesReadServiceData = {
  body?: never
  path: {
    /**
     * Id
     */
    id: string
  }
  query?: never
  url: '/api/v1/services/{id}'
}

export type ServicesReadServiceErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ServicesReadServiceError = ServicesReadServiceErrors[keyof ServicesReadServiceErrors]

export type ServicesReadServiceResponses = {
  /**
   * Successful Response
   */
  200: ServicePublic
}

export type ServicesReadServiceResponse =
  ServicesReadServiceResponses[keyof ServicesReadServiceResponses]

export type ServicesUpdateServiceData = {
  body: ServiceUpdate
  path: {
    /**
     * Id
     */
    id: string
  }
  query?: never
  url: '/api/v1/services/{id}'
}

export type ServicesUpdateServiceErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ServicesUpdateServiceError =
  ServicesUpdateServiceErrors[keyof ServicesUpdateServiceErrors]

export type ServicesUpdateServiceResponses = {
  /**
   * Successful Response
   */
  200: ServicePublic
}

export type ServicesUpdateServiceResponse =
  ServicesUpdateServiceResponses[keyof ServicesUpdateServiceResponses]

export type CategoriesReadCategoriesData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/categories/'
}

export type CategoriesReadCategoriesResponses = {
  /**
   * Response Categories-Read Categories
   * Successful Response
   */
  200: CategoryPublic[]
}

export type CategoriesReadCategoriesResponse =
  CategoriesReadCategoriesResponses[keyof CategoriesReadCategoriesResponses]

export type EventsReadEventsData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/events/'
}

export type EventsReadEventsResponses = {
  /**
   * Response Events-Read Events
   * Successful Response
   */
  200: EventPublic[]
}

export type EventsReadEventsResponse = EventsReadEventsResponses[keyof EventsReadEventsResponses]

export type EventsCreateEventData = {
  body: EventCreate
  path?: never
  query?: never
  url: '/api/v1/events/'
}

export type EventsCreateEventErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type EventsCreateEventError = EventsCreateEventErrors[keyof EventsCreateEventErrors]

export type EventsCreateEventResponses = {
  /**
   * Successful Response
   */
  200: EventPublic
}

export type EventsCreateEventResponse = EventsCreateEventResponses[keyof EventsCreateEventResponses]

export type PostsReadPostsData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/posts/'
}

export type PostsReadPostsResponses = {
  /**
   * Response Posts-Read Posts
   * Successful Response
   */
  200: PostPublic[]
}

export type PostsReadPostsResponse = PostsReadPostsResponses[keyof PostsReadPostsResponses]

export type PostsCreatePostData = {
  body: BodyPostsCreatePost
  path?: never
  query?: never
  url: '/api/v1/posts/'
}

export type PostsCreatePostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type PostsCreatePostError = PostsCreatePostErrors[keyof PostsCreatePostErrors]

export type PostsCreatePostResponses = {
  /**
   * Successful Response
   */
  200: PostPublic
}

export type PostsCreatePostResponse = PostsCreatePostResponses[keyof PostsCreatePostResponses]

export type ProjectsCreateProjectData = {
  body: BodyProjectsCreateProject
  path?: never
  query?: never
  url: '/api/v1/projects/'
}

export type ProjectsCreateProjectErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ProjectsCreateProjectError =
  ProjectsCreateProjectErrors[keyof ProjectsCreateProjectErrors]

export type ProjectsCreateProjectResponses = {
  /**
   * Successful Response
   */
  200: ProjectPublic
}

export type ProjectsCreateProjectResponse =
  ProjectsCreateProjectResponses[keyof ProjectsCreateProjectResponses]

export type PrivateCreateUserData = {
  body: PrivateUserCreate
  path?: never
  query?: never
  url: '/api/v1/private/users/'
}

export type PrivateCreateUserErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type PrivateCreateUserError = PrivateCreateUserErrors[keyof PrivateCreateUserErrors]

export type PrivateCreateUserResponses = {
  /**
   * Successful Response
   */
  200: UserPublic
}

export type PrivateCreateUserResponse = PrivateCreateUserResponses[keyof PrivateCreateUserResponses]

export type ClientOptions = {
  baseUrl: `${string}://${string}` | (string & object)
}
