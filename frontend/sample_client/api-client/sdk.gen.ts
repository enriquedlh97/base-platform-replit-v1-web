// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  formDataBodySerializer,
  urlSearchParamsBodySerializer,
} from './client'
import { client as _heyApiClient } from './client.gen'
import type {
  LoginTestTokenData,
  LoginTestTokenResponses,
  UsersReadUsersData,
  UsersReadUsersResponses,
  UsersReadUsersErrors,
  UsersCreateUserData,
  UsersCreateUserResponses,
  UsersCreateUserErrors,
  UsersDeleteUserMeData,
  UsersDeleteUserMeResponses,
  UsersReadUserMeData,
  UsersReadUserMeResponses,
  UsersUpdateUserMeData,
  UsersUpdateUserMeResponses,
  UsersUpdateUserMeErrors,
  UsersUploadAvatarMeData,
  UsersUploadAvatarMeResponses,
  UsersUploadAvatarMeErrors,
  UsersDeleteUserData,
  UsersDeleteUserResponses,
  UsersDeleteUserErrors,
  UsersReadUserByIdData,
  UsersReadUserByIdResponses,
  UsersReadUserByIdErrors,
  UsersUpdateUserData,
  UsersUpdateUserResponses,
  UsersUpdateUserErrors,
  UtilsTestEmailData,
  UtilsTestEmailResponses,
  UtilsTestEmailErrors,
  UtilsHealthCheckData,
  UtilsHealthCheckResponses,
  ItemsReadItemsData,
  ItemsReadItemsResponses,
  ItemsReadItemsErrors,
  ItemsCreateItemData,
  ItemsCreateItemResponses,
  ItemsCreateItemErrors,
  ItemsDeleteItemData,
  ItemsDeleteItemResponses,
  ItemsDeleteItemErrors,
  ItemsReadItemData,
  ItemsReadItemResponses,
  ItemsReadItemErrors,
  ItemsUpdateItemData,
  ItemsUpdateItemResponses,
  ItemsUpdateItemErrors,
  ClientsGetAllClientsData,
  ClientsGetAllClientsResponses,
  ClientsCreateClientData,
  ClientsCreateClientResponses,
  ClientsCreateClientErrors,
  ClientsDeleteClientData,
  ClientsDeleteClientResponses,
  ClientsDeleteClientErrors,
  ClientsGetClientData,
  ClientsGetClientResponses,
  ClientsGetClientErrors,
  ClientsUpdateClientData,
  ClientsUpdateClientResponses,
  ClientsUpdateClientErrors,
  AppointmentsGetAllAppointmentsData,
  AppointmentsGetAllAppointmentsResponses,
  AppointmentsCreateAppointmentData,
  AppointmentsCreateAppointmentResponses,
  AppointmentsCreateAppointmentErrors,
  AppointmentsDeleteAppointmentData,
  AppointmentsDeleteAppointmentResponses,
  AppointmentsDeleteAppointmentErrors,
  AppointmentsGetAppointmentData,
  AppointmentsGetAppointmentResponses,
  AppointmentsGetAppointmentErrors,
  AppointmentsUpdateAppointmentData,
  AppointmentsUpdateAppointmentResponses,
  AppointmentsUpdateAppointmentErrors,
  ProvidersReadProvidersData,
  ProvidersReadProvidersResponses,
  ProvidersCreateProviderEndpointData,
  ProvidersCreateProviderEndpointResponses,
  ProvidersCreateProviderEndpointErrors,
  ProvidersDeleteProviderEndpointData,
  ProvidersDeleteProviderEndpointResponses,
  ProvidersDeleteProviderEndpointErrors,
  ProvidersReadProviderData,
  ProvidersReadProviderResponses,
  ProvidersReadProviderErrors,
  ProvidersUpdateProviderData,
  ProvidersUpdateProviderResponses,
  ProvidersUpdateProviderErrors,
  ServicesReadServicesData,
  ServicesReadServicesResponses,
  ServicesCreateServiceEndpointData,
  ServicesCreateServiceEndpointResponses,
  ServicesCreateServiceEndpointErrors,
  ServicesDeleteServiceEndpointData,
  ServicesDeleteServiceEndpointResponses,
  ServicesDeleteServiceEndpointErrors,
  ServicesReadServiceData,
  ServicesReadServiceResponses,
  ServicesReadServiceErrors,
  ServicesUpdateServiceData,
  ServicesUpdateServiceResponses,
  ServicesUpdateServiceErrors,
  CategoriesReadCategoriesData,
  CategoriesReadCategoriesResponses,
  EventsReadEventsData,
  EventsReadEventsResponses,
  EventsCreateEventData,
  EventsCreateEventResponses,
  EventsCreateEventErrors,
  PostsReadPostsData,
  PostsReadPostsResponses,
  PostsCreatePostData,
  PostsCreatePostResponses,
  PostsCreatePostErrors,
  ProjectsCreateProjectData,
  ProjectsCreateProjectResponses,
  ProjectsCreateProjectErrors,
  PrivateCreateUserData,
  PrivateCreateUserResponses,
  PrivateCreateUserErrors,
} from './types.gen'

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

export class LoginService {
  /**
   * Test Token
   * Test access token
   */
  public static testToken<ThrowOnError extends boolean = false>(
    options?: Options<LoginTestTokenData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).post<LoginTestTokenResponses, unknown, ThrowOnError>({
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/api/v1/login/test-token',
      ...options,
    })
  }
}

export class UsersService {
  /**
   * Read Users
   * Retrieve users.
   */
  public static readUsers<ThrowOnError extends boolean = false>(
    options?: Options<UsersReadUsersData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      UsersReadUsersResponses,
      UsersReadUsersErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/api/v1/users/',
      ...options,
    })
  }

  /**
   * Create User
   * Create new user.
   */
  public static createUser<ThrowOnError extends boolean = false>(
    options: Options<UsersCreateUserData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      UsersCreateUserResponses,
      UsersCreateUserErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/api/v1/users/',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Delete User Me
   * Delete own user.
   */
  public static deleteUserMe<ThrowOnError extends boolean = false>(
    options?: Options<UsersDeleteUserMeData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).delete<
      UsersDeleteUserMeResponses,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/api/v1/users/me',
      ...options,
    })
  }

  /**
   * Read User Me
   * Get current user.
   */
  public static readUserMe<ThrowOnError extends boolean = false>(
    options?: Options<UsersReadUserMeData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<UsersReadUserMeResponses, unknown, ThrowOnError>({
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/api/v1/users/me',
      ...options,
    })
  }

  /**
   * Update User Me
   * Update own user.
   */
  public static updateUserMe<ThrowOnError extends boolean = false>(
    options: Options<UsersUpdateUserMeData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).patch<
      UsersUpdateUserMeResponses,
      UsersUpdateUserMeErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/api/v1/users/me',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Upload Avatar Me
   * Upload avatar for the current user.
   *
   * The avatar will be uploaded to Supabase Storage in the 'avatars' bucket
   * and the user's avatar_url will be updated in the database.
   *
   * Expected: multipart/form-data with 'avatar' field containing the image file.
   * Max size: 5MB. Allowed types: image/jpeg, image/png, image/webp.
   */
  public static uploadAvatarMe<ThrowOnError extends boolean = false>(
    options: Options<UsersUploadAvatarMeData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      UsersUploadAvatarMeResponses,
      UsersUploadAvatarMeErrors,
      ThrowOnError
    >({
      ...formDataBodySerializer,
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/api/v1/users/me/avatar',
      ...options,
      headers: {
        'Content-Type': null,
        ...options.headers,
      },
    })
  }

  /**
   * Delete User
   * Delete a user.
   */
  public static deleteUser<ThrowOnError extends boolean = false>(
    options: Options<UsersDeleteUserData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).delete<
      UsersDeleteUserResponses,
      UsersDeleteUserErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/api/v1/users/{user_id}',
      ...options,
    })
  }

  /**
   * Read User By Id
   * Get a specific user by id.
   */
  public static readUserById<ThrowOnError extends boolean = false>(
    options: Options<UsersReadUserByIdData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).get<
      UsersReadUserByIdResponses,
      UsersReadUserByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/api/v1/users/{user_id}',
      ...options,
    })
  }

  /**
   * Update User
   * Update a user.
   */
  public static updateUser<ThrowOnError extends boolean = false>(
    options: Options<UsersUpdateUserData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).patch<
      UsersUpdateUserResponses,
      UsersUpdateUserErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/api/v1/users/{user_id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }
}

export class UtilsService {
  /**
   * Test Email
   * Test emails.
   */
  public static testEmail<ThrowOnError extends boolean = false>(
    options: Options<UtilsTestEmailData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      UtilsTestEmailResponses,
      UtilsTestEmailErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/api/v1/utils/test-email/',
      ...options,
    })
  }

  /**
   * Health Check
   */
  public static healthCheck<ThrowOnError extends boolean = false>(
    options?: Options<UtilsHealthCheckData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<UtilsHealthCheckResponses, unknown, ThrowOnError>(
      {
        url: '/api/v1/utils/health-check/',
        ...options,
      }
    )
  }
}

export class ItemsService {
  /**
   * Read Items
   * Retrieve items.
   */
  public static readItems<ThrowOnError extends boolean = false>(
    options?: Options<ItemsReadItemsData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ItemsReadItemsResponses,
      ItemsReadItemsErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/api/v1/items/',
      ...options,
    })
  }

  /**
   * Create Item
   * Create new item.
   */
  public static createItem<ThrowOnError extends boolean = false>(
    options: Options<ItemsCreateItemData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      ItemsCreateItemResponses,
      ItemsCreateItemErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/api/v1/items/',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Delete Item
   * Delete an item.
   */
  public static deleteItem<ThrowOnError extends boolean = false>(
    options: Options<ItemsDeleteItemData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).delete<
      ItemsDeleteItemResponses,
      ItemsDeleteItemErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/api/v1/items/{id}',
      ...options,
    })
  }

  /**
   * Read Item
   * Get item by ID.
   */
  public static readItem<ThrowOnError extends boolean = false>(
    options: Options<ItemsReadItemData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).get<
      ItemsReadItemResponses,
      ItemsReadItemErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/api/v1/items/{id}',
      ...options,
    })
  }

  /**
   * Update Item
   * Update an item.
   */
  public static updateItem<ThrowOnError extends boolean = false>(
    options: Options<ItemsUpdateItemData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).put<
      ItemsUpdateItemResponses,
      ItemsUpdateItemErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/api/v1/items/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }
}

export class ClientsService {
  /**
   * Get All Clients
   * Get all clients.
   */
  public static getAllClients<ThrowOnError extends boolean = false>(
    options?: Options<ClientsGetAllClientsData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ClientsGetAllClientsResponses,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/api/v1/clients/',
      ...options,
    })
  }

  /**
   * Create Client
   * Create new client.
   */
  public static createClient<ThrowOnError extends boolean = false>(
    options: Options<ClientsCreateClientData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      ClientsCreateClientResponses,
      ClientsCreateClientErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/api/v1/clients/',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Delete Client
   * Delete a client by client_id.
   */
  public static deleteClient<ThrowOnError extends boolean = false>(
    options: Options<ClientsDeleteClientData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).delete<
      ClientsDeleteClientResponses,
      ClientsDeleteClientErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/api/v1/clients/{client_id}',
      ...options,
    })
  }

  /**
   * Get Client
   * Get a specific client by client_id.
   */
  public static getClient<ThrowOnError extends boolean = false>(
    options: Options<ClientsGetClientData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).get<
      ClientsGetClientResponses,
      ClientsGetClientErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/api/v1/clients/{client_id}',
      ...options,
    })
  }

  /**
   * Update Client
   * Update an existing client.
   */
  public static updateClient<ThrowOnError extends boolean = false>(
    options: Options<ClientsUpdateClientData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).put<
      ClientsUpdateClientResponses,
      ClientsUpdateClientErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/api/v1/clients/{client_id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }
}

export class AppointmentsService {
  /**
   * Get All Appointments
   * Get all appointments.
   */
  public static getAllAppointments<ThrowOnError extends boolean = false>(
    options?: Options<AppointmentsGetAllAppointmentsData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      AppointmentsGetAllAppointmentsResponses,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/api/v1/appointments/',
      ...options,
    })
  }

  /**
   * Create Appointment
   * Create a new appointment.
   */
  public static createAppointment<ThrowOnError extends boolean = false>(
    options: Options<AppointmentsCreateAppointmentData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      AppointmentsCreateAppointmentResponses,
      AppointmentsCreateAppointmentErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/api/v1/appointments/',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Delete Appointment
   * Delete an appointment by appointment_id.
   */
  public static deleteAppointment<ThrowOnError extends boolean = false>(
    options: Options<AppointmentsDeleteAppointmentData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).delete<
      AppointmentsDeleteAppointmentResponses,
      AppointmentsDeleteAppointmentErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/api/v1/appointments/{appointment_id}',
      ...options,
    })
  }

  /**
   * Get Appointment
   * Get a specific appointment by appointment_id.
   */
  public static getAppointment<ThrowOnError extends boolean = false>(
    options: Options<AppointmentsGetAppointmentData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).get<
      AppointmentsGetAppointmentResponses,
      AppointmentsGetAppointmentErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/api/v1/appointments/{appointment_id}',
      ...options,
    })
  }

  /**
   * Update Appointment
   * Update an existing appointment.
   */
  public static updateAppointment<ThrowOnError extends boolean = false>(
    options: Options<AppointmentsUpdateAppointmentData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).put<
      AppointmentsUpdateAppointmentResponses,
      AppointmentsUpdateAppointmentErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/api/v1/appointments/{appointment_id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }
}

export class ProvidersService {
  /**
   * Read Providers
   * Retrieve providers.
   */
  public static readProviders<ThrowOnError extends boolean = false>(
    options?: Options<ProvidersReadProvidersData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ProvidersReadProvidersResponses,
      unknown,
      ThrowOnError
    >({
      url: '/api/v1/providers/',
      ...options,
    })
  }

  /**
   * Create Provider Endpoint
   * Create new provider.
   */
  public static createProviderEndpoint<ThrowOnError extends boolean = false>(
    options: Options<ProvidersCreateProviderEndpointData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      ProvidersCreateProviderEndpointResponses,
      ProvidersCreateProviderEndpointErrors,
      ThrowOnError
    >({
      url: '/api/v1/providers/',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Delete Provider Endpoint
   * Delete a provider.
   */
  public static deleteProviderEndpoint<ThrowOnError extends boolean = false>(
    options: Options<ProvidersDeleteProviderEndpointData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).delete<
      ProvidersDeleteProviderEndpointResponses,
      ProvidersDeleteProviderEndpointErrors,
      ThrowOnError
    >({
      url: '/api/v1/providers/{id}',
      ...options,
    })
  }

  /**
   * Read Provider
   * Get provider by ID.
   */
  public static readProvider<ThrowOnError extends boolean = false>(
    options: Options<ProvidersReadProviderData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).get<
      ProvidersReadProviderResponses,
      ProvidersReadProviderErrors,
      ThrowOnError
    >({
      url: '/api/v1/providers/{id}',
      ...options,
    })
  }

  /**
   * Update Provider
   * Update a provider.
   */
  public static updateProvider<ThrowOnError extends boolean = false>(
    options: Options<ProvidersUpdateProviderData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).put<
      ProvidersUpdateProviderResponses,
      ProvidersUpdateProviderErrors,
      ThrowOnError
    >({
      url: '/api/v1/providers/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }
}

export class ServicesService {
  /**
   * Read Services
   * Retrieve services.
   */
  public static readServices<ThrowOnError extends boolean = false>(
    options?: Options<ServicesReadServicesData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ServicesReadServicesResponses,
      unknown,
      ThrowOnError
    >({
      url: '/api/v1/services/',
      ...options,
    })
  }

  /**
   * Create Service Endpoint
   * Create new service.
   */
  public static createServiceEndpoint<ThrowOnError extends boolean = false>(
    options: Options<ServicesCreateServiceEndpointData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      ServicesCreateServiceEndpointResponses,
      ServicesCreateServiceEndpointErrors,
      ThrowOnError
    >({
      url: '/api/v1/services/',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Delete Service Endpoint
   * Delete a service.
   */
  public static deleteServiceEndpoint<ThrowOnError extends boolean = false>(
    options: Options<ServicesDeleteServiceEndpointData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).delete<
      ServicesDeleteServiceEndpointResponses,
      ServicesDeleteServiceEndpointErrors,
      ThrowOnError
    >({
      url: '/api/v1/services/{id}',
      ...options,
    })
  }

  /**
   * Read Service
   * Get service by ID.
   */
  public static readService<ThrowOnError extends boolean = false>(
    options: Options<ServicesReadServiceData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).get<
      ServicesReadServiceResponses,
      ServicesReadServiceErrors,
      ThrowOnError
    >({
      url: '/api/v1/services/{id}',
      ...options,
    })
  }

  /**
   * Update Service
   * Update a service.
   */
  public static updateService<ThrowOnError extends boolean = false>(
    options: Options<ServicesUpdateServiceData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).put<
      ServicesUpdateServiceResponses,
      ServicesUpdateServiceErrors,
      ThrowOnError
    >({
      url: '/api/v1/services/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }
}

export class CategoriesService {
  /**
   * Read Categories
   * Retrieve all categories.
   */
  public static readCategories<ThrowOnError extends boolean = false>(
    options?: Options<CategoriesReadCategoriesData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      CategoriesReadCategoriesResponses,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/api/v1/categories/',
      ...options,
    })
  }
}

export class EventsService {
  /**
   * Read Events
   * Retrieve events for the authenticated user.
   */
  public static readEvents<ThrowOnError extends boolean = false>(
    options?: Options<EventsReadEventsData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<EventsReadEventsResponses, unknown, ThrowOnError>(
      {
        security: [
          {
            scheme: 'bearer',
            type: 'http',
          },
        ],
        url: '/api/v1/events/',
        ...options,
      }
    )
  }

  /**
   * Create Event
   * Create a new event for the authenticated user.
   */
  public static createEvent<ThrowOnError extends boolean = false>(
    options: Options<EventsCreateEventData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      EventsCreateEventResponses,
      EventsCreateEventErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/api/v1/events/',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }
}

export class PostsService {
  /**
   * Read Posts
   */
  public static readPosts<ThrowOnError extends boolean = false>(
    options?: Options<PostsReadPostsData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<PostsReadPostsResponses, unknown, ThrowOnError>({
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/api/v1/posts/',
      ...options,
    })
  }

  /**
   * Create Post
   * Create a new post with optional image upload.
   *
   * The image will be uploaded to Supabase Storage and the post will be created
   * with the image URL. The user_id is automatically set from the authenticated user.
   *
   * File uploads are handled by the centralized FileUploadService for consistent
   * validation, error handling, and storage management.
   */
  public static createPost<ThrowOnError extends boolean = false>(
    options: Options<PostsCreatePostData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      PostsCreatePostResponses,
      PostsCreatePostErrors,
      ThrowOnError
    >({
      ...formDataBodySerializer,
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/api/v1/posts/',
      ...options,
      headers: {
        'Content-Type': null,
        ...options.headers,
      },
    })
  }
}

export class ProjectsService {
  /**
   * Create Project
   * Create a new project.
   *
   * The project will be created with the user_id automatically set from the authenticated user.
   */
  public static createProject<ThrowOnError extends boolean = false>(
    options: Options<ProjectsCreateProjectData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      ProjectsCreateProjectResponses,
      ProjectsCreateProjectErrors,
      ThrowOnError
    >({
      ...urlSearchParamsBodySerializer,
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/api/v1/projects/',
      ...options,
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        ...options.headers,
      },
    })
  }
}

export class PrivateService {
  /**
   * Create User
   * Create a new user.
   */
  public static createUser<ThrowOnError extends boolean = false>(
    options: Options<PrivateCreateUserData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      PrivateCreateUserResponses,
      PrivateCreateUserErrors,
      ThrowOnError
    >({
      url: '/api/v1/private/users/',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }
}
